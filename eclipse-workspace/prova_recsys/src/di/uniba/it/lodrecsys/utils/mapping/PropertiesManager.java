package di.uniba.it.lodrecsys.utils.mapping;

import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.sparql.util.StringUtils;
import com.hp.hpl.jena.tdb.TDBFactory;
import di.uniba.it.lodrecsys.entity.MovieMapping;
import di.uniba.it.lodrecsys.utils.Utils;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.List;

/**
 * Class which grant to manage the LOD properties index generated by
 * Apache Jena TDB
 */
public class PropertiesManager {
    private Dataset tupleDataset;
    public Model datasetModel;
    private boolean isWriteMode;

    /**
     * Creates a new instance which will be able to manage
     * the index stored in the specified directory
     *
     * @param dirName the Jena TDB index directory
     */
    public PropertiesManager(String dirName) {
        tupleDataset = TDBFactory.createDataset(dirName);
        //tupleDataset.begin(ReadWrite.READ) ;
        datasetModel = tupleDataset.getDefaultModel();

    }

    /**
     * Initialize the current index manager
     *
     * @param isWriteMode true if the index will be modified, false otherwise
     */
    public void start(boolean isWriteMode) {
        this.isWriteMode = isWriteMode;
        tupleDataset.begin(isWriteMode ? ReadWrite.WRITE : ReadWrite.READ);
        datasetModel = tupleDataset.getDefaultModel();

    }

    /**
     * Adds a tuple to the current index using a specific
     * subject URI
     *
     * @param currSolution new rdf tuple to be add
     * @param subjectURI   rdf tuple's subject
     */
    public void addSolution(QuerySolution currSolution, String subjectURI) {
        if (isWriteMode) {
            Resource currResource = datasetModel.createResource(subjectURI);

            Property prop = datasetModel.createProperty(currSolution.getResource("?prop").toString());
            Statement stat = datasetModel.createStatement(currResource, prop, currSolution.get("?value").toString());
            datasetModel.add(stat);

        }
    }

    /**
     * Adds a new tuple to the current index
     *
     * @param currSolution the new rdf tuple
     */
    public void addSolution(QuerySolution currSolution) {
        if (isWriteMode) {
            Resource currResource = datasetModel.createResource(currSolution.getResource("?exp_prop_value").toString());
            Property prop = datasetModel.createProperty(currSolution.getResource("?exp_prop").toString());
            Statement stat = datasetModel.createStatement(currResource, prop, currSolution.get("?item"));
            datasetModel.add(stat);

        }

    }

    /**
     * Returns all the rdf tuple associated to the specified
     * URI
     *
     * @param resourceURI resource uri
     * @return a list of statement associated to the URI
     */
    public List<Statement> getResourceProperties(String resourceURI) {
        List<Statement> listStat = null;

        try {
            resourceURI = URLDecoder.decode(resourceURI, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            return null;
        }

        listStat = new ArrayList<>();

        StmtIterator statIterator = datasetModel.getResource(resourceURI).listProperties();

        while (statIterator.hasNext()) {
            listStat.add(statIterator.nextStatement());
        }


        return listStat;
    }

    /**
     * Commits all the changes done to the current dataset
     */
    public void commitChanges() {
        tupleDataset.commit();
    }

    /**
     * Closes definitely the index and saves all the modifies
     */
    public void closeManager() {
        tupleDataset.end();
    }

    /**
     * Re-initialize the dataset
     */
    public void restart() {
        if (isWriteMode)
            tupleDataset.begin(ReadWrite.WRITE);
    }

}

